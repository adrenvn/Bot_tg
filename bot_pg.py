import os
import logging
import asyncpg
import nest_asyncio
import pandas as pd
import re
from dotenv import load_dotenv
from tempfile import NamedTemporaryFile
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏)
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_VIDEO_LINKS, WAITING_SCORE, WAITING_COMMENT = range(3)
URL_REGEX = re.compile(r'^https?://(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&//=]*)$')

async def get_db_pool():
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return await asyncpg.create_pool(DATABASE_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        return None

async def post_init(application: Application) -> None:
    application.bot_data["db_pool"] = await get_db_pool()
    if not application.bot_data["db_pool"]:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
        raise RuntimeError("Database connection failed")
    async with application.bot_data["db_pool"].acquire() as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PRIMARY KEY)
        await conn.execute("""
CREATE TABLE IF NOT EXISTS videos (
    id SERIAL PRIMARY KEY,
    link TEXT NOT NULL UNIQUE,
    total_score INTEGER DEFAULT 0,
    ratings_count INTEGER DEFAULT 0,
    avg_score FLOAT DEFAULT 0,
    comments TEXT[] DEFAULT ARRAY[]::TEXT[]
)
        """)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data='send_video_prompt')],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data='start_review')],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='download')],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='clear_table')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    markup = get_main_menu_keyboard()
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        await update.callback_query.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return ConversationHandler.END

async def send_video_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    return WAITING_VIDEO_LINKS

async def receive_video_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!")
        return WAITING_VIDEO_LINKS
    
    links = [link.strip() for link in update.message.text.split()]
    invalid_links = [link for link in links if not URL_REGEX.match(link)]
    
    if invalid_links:
        await update.message.reply_text(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {', '.join(invalid_links)}\n"
            "–ü—Ä–∏–º–µ—Ä: http://example.com –∏–ª–∏ https://www.site.com/path"
        )
        return WAITING_VIDEO_LINKS
    
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END
    
    async with db_pool.acquire() as conn:
        for link in links:
            await conn.execute("""
                INSERT INTO videos (link) VALUES ($1) ON CONFLICT (link) DO NOTHING
            """, link)
    
    await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–∏–¥–µ–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –≤–∏–¥–µ–æ", callback_data='send_video_prompt')],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –≤–∏–¥–µ–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=markup)
    
    return ConversationHandler.END

async def start_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END
    return await ask_for_rating(update, context)

async def ask_for_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_pool = context.bot_data.get("db_pool")
    async with db_pool.acquire() as conn:
        video = await conn.fetchrow("SELECT link FROM videos WHERE ratings_count = 0 LIMIT 1")

    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    if not video:
        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        text = "–°–ø–∞—Å–∏–±–æ, –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ! üéâ"
        if update.callback_query:
            await update.callback_query.message.reply_text(text, reply_markup=markup)
        else:
            await update.message.reply_text(text, reply_markup=markup)
        return ConversationHandler.END

    context.user_data["current_video"] = video["link"]
    text_to_send = f"–û—Ü–µ–Ω–∏—Ç–µ –≤–∏–¥–µ–æ –æ—Ç 1 –¥–æ 10:\n{video['link']}"
    
    if update.callback_query:
        await update.callback_query.message.reply_text(text_to_send)
    else:
        await update.message.reply_text(text_to_send)
    return WAITING_SCORE

async def receive_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rating = int(update.message.text)
        if rating < 1 or rating > 10:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return WAITING_SCORE
    
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END
    
    video_link = context.user_data.get("current_video")
    async with db_pool.acquire() as conn:
        await conn.execute("""
            UPDATE videos
            SET total_score = total_score + $1,
                ratings_count = ratings_count + 1,
                avg_score = (total_score + $1)::FLOAT / (ratings_count + 1)
            WHERE link = $2
        """, rating, video_link)

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∏–Ω. 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    return WAITING_COMMENT

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    if len(comment) < 15:
        await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_COMMENT

    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return ConversationHandler.END

    video_link = context.user_data.get("current_video")
    async with db_pool.acquire() as conn:
        await conn.execute("""
            UPDATE videos
            SET comments = array_append(comments, $1)
            WHERE link = $2
        """, comment, video_link)

    await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    return await ask_for_rating(update, context)

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ—Å—Ç—É–ø –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if update.effective_user.id not in ADMIN_IDS:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM videos")
    if not rows:
        await update.callback_query.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!")
        return

    df = pd.DataFrame(rows, columns=["id", "link", "total_score", "ratings_count", "avg_score", "comments"])
    with NamedTemporaryFile(delete=False, suffix=".csv") as tmp:
        df.to_csv(tmp.name, index=False, sep=";", encoding="utf-8-sig")
        with open(tmp.name, "rb") as f:
            await update.callback_query.message.reply_document(
                document=InputFile(f, filename="videos.csv"),
                caption="üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:"
            )
    os.unlink(tmp.name)

async def clear_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ—Å—Ç—É–ø –∫ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if update.effective_user.id not in ADMIN_IDS:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return
    async with db_pool.acquire() as conn:
        await conn.execute("TRUNCATE TABLE videos")
    await update.callback_query.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞!")

# –ù–æ–≤—ã–π –∫–æ–ª–±—ç–∫: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    markup = get_main_menu_keyboard()
    await update.callback_query.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ù–æ–≤—ã–π –∫–æ–ª–±—ç–∫: "–ü–æ–º–æ—â—å"
async def help_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ:\n\n"
        "‚Ä¢ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ</b> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "‚Ä¢ <b>–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É</b> ‚Äì –æ—Ü–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "‚Ä¢ <b>–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É</b> ‚Äì –ø–æ–ª—É—á–∏—Ç—å CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞). (–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.)\n"
        "‚Ä¢ <b>–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É</b> ‚Äì —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã. (–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.)\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    await update.callback_query.message.reply_text(help_text, parse_mode="HTML")

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_admin
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <ID>")
        return
    try:
        new_admin_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return
    if new_admin_id in ADMIN_IDS:
        await update.message.reply_text("–≠—Ç–æ—Ç ID —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        ADMIN_IDS.append(new_admin_id)
        await update.message.reply_text(f"ID {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {context.error}")
    if update and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ConversationHandler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏ –æ—Ü–µ–Ω–∫–∏
conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(send_video_prompt, pattern='^send_video_prompt$'),
        CallbackQueryHandler(start_review, pattern='^start_review$')
    ],
    states={
        WAITING_VIDEO_LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_video_links)],
        WAITING_SCORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_rating)],
        WAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment)]
    },
    fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
)

def main():
    app = Application.builder().token(TOKEN).post_init(post_init).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(download, pattern='^download$'))
    app.add_handler(CallbackQueryHandler(clear_table, pattern='^clear_table$'))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    app.add_handler(CallbackQueryHandler(help_section, pattern='^help$'))
    app.add_handler(CommandHandler("add_admin", add_admin))
    
    app.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
