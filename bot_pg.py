import asyncio
import logging
import asyncpg
import csv
import os
import aiofiles
import uvloop
from io import StringIO
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters, ContextTypes
)
from config import TOKEN, DATABASE_URL

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = {5060645464}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
WAITING_VIDEO_LINKS, CONFIRM_MORE_LINKS = range(30, 32)
WAITING_SCORE, WAITING_COMMENT = range(2)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def connect_with_retry(retries=5, delay=3):
    for i in range(retries):
        try:
            pool = await asyncpg.create_pool(DATABASE_URL, max_size=20)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return pool
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {e}. –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}")
            await asyncio.sleep(delay)
    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

# –§—É–Ω–∫—Ü–∏–∏ –ë–î
async def add_video_link(pool, video_link: str):
    async with pool.acquire() as conn:
        try:
            await conn.execute('''
                INSERT INTO videos (video_link) VALUES ($1)
                ON CONFLICT (video_link) DO NOTHING;
            ''', video_link)
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ: %s", video_link)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ {video_link}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data='send_video')],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data='start_rating')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "send_video":
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        elif query.data == "start_rating":
            await query.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–∏–¥–µ–æ.")
        elif query.data == "help":
            await query.message.reply_text("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É.")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /download ‚Äì —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
async def download_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.")
        return

    pool = context.bot_data["db_pool"]
    filename = "videos_ratings.csv"
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM videos")

    output = StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["ID", "–°—Å—ã–ª–∫–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])
    for row in rows:
        writer.writerow([row['video_id'], row['video_link'], row['created_at']])

    async with aiofiles.open(filename, "w", encoding="utf-8-sig") as f:
        await f.write(output.getvalue())

    try:
        async with aiofiles.open(filename, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    os.remove(filename)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
async def main():
    try:
        pool = await connect_with_retry()
        app = ApplicationBuilder().token(TOKEN).build()
        app.bot_data["db_pool"] = pool

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(CommandHandler("download", download_table))
        app.add_handler(CommandHandler("clear_table", clear_table))

        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await app.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    uvloop.install()
    
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    loop.create_task(main())
    loop.run_forever()

