import os
import logging
import pandas as pd
import asyncpg
import nest_asyncio
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_VIDEO_LINKS, WAITING_RATING, WAITING_COMMENT = range(3)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async def recreate_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.effective_message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    async with db_pool.acquire() as conn:
        await conn.execute("DROP TABLE IF EXISTS videos CASCADE")
        await conn.execute(
            """CREATE TABLE videos (
                id SERIAL PRIMARY KEY,
                link TEXT NOT NULL,
                total_score INT DEFAULT 0,
                avg_score FLOAT DEFAULT 0,
                comments TEXT DEFAULT '[]'
            )"""
        )
    await update.effective_message.reply_text("üîÑ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_pool = context.bot_data.get("db_pool")
    if not db_pool:
        await update.effective_message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    async with db_pool.acquire() as conn:
        records = await conn.fetch("SELECT * FROM videos")
        df = pd.DataFrame(records, columns=["id", "link", "total_score", "avg_score", "comments"])
        df.to_csv("videos.csv", index=False)
        
        with open("videos.csv", "rb") as file:
            await update.effective_message.reply_document(document=InputFile(file, "videos.csv"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="send_video")],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="start_rating")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    üÜò –ö–æ–º–∞–Ω–¥—ã:
    /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /download - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    /recreate_table - –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    await update.effective_message.reply_text(help_text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
async def send_video_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.effective_message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    return WAITING_VIDEO_LINKS

async def receive_video_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.effective_message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
        return ConversationHandler.END

    links = update.message.text.split()
    db_pool = context.bot_data.get("db_pool")
    
    if not db_pool:
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return ConversationHandler.END

    try:
        async with db_pool.acquire() as conn:
            for link in links:
                await conn.execute(
                    "INSERT INTO videos (link) VALUES ($1)", link.strip()
                )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –ï—â—ë –≤–∏–¥–µ–æ", callback_data="send_video")],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="start")],
        ]
        await update.effective_message.reply_text(
            "‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    # Conversation Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(send_video_callback, pattern="^send_video$")],
        states={
            WAITING_VIDEO_LINKS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_video_links)
            ],
        },
        fallbacks=[],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("download", download))
    app.add_handler(CommandHandler("recreate_table", recreate_table))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(start, pattern="^start$"))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async def on_startup(app: Application):
        app.bot_data["db_pool"] = await get_db_pool()
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    app.run_polling(on_startup=on_startup)

if __name__ == "__main__":
    main()